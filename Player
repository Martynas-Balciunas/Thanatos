using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class PlayerBehaviour : MonoBehaviour
{
    public float moveSpeed = 5f;          // Horizontal movement speed
    public float jumpForce = 10f;         // Force for the initial jump
    public float doubleJumpForce = 8f;    // Force for the double jump
    public float groundCheckRadius = 0.2f; // Radius for ground check
    public Transform groundCheck;         // Transform position for ground check
    public LayerMask groundLayer;         // Layer mask for ground detection
    public int maxHealth = 100;           // Maximum health of the player
    public GameObject hiddenTileMap;      // Reference to the hidden tile map

    private Rigidbody2D rb;               // Reference to the Rigidbody2D component
    private bool isGrounded;              // Whether the player is grounded
    private bool canDoubleJump;           // Whether the player can perform a double jump
    private int jumpCount = 0;            // Count of jumps performed
    private int currentHealth;            // Current health of the player
    private bool isAlive = true;          // Player state (alive)
    private bool isGhost = false;         // Player state (ghost)

    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        currentHealth = maxHealth;        // Initialize current health
    }

    void Update()
    {
        // Check if the player is grounded
        isGrounded = Physics2D.OverlapCircle(groundCheck.position, groundCheckRadius, groundLayer) != null;

        // Reset double jump and jump count if grounded
        if (isGrounded)
        {
            canDoubleJump = true;
            jumpCount = 0;
        }

        // Handle horizontal movement
        float moveInput = Input.GetAxis("Horizontal");
        rb.velocity = new Vector2(moveInput * moveSpeed, rb.velocity.y);

        // Handle jump input
        if (Input.GetButtonDown("Jump"))
        {
            if (isGrounded)
            {
                Jump(jumpForce);
            }
            else if (canDoubleJump && jumpCount < 1)
            {
                Jump(doubleJumpForce);
                canDoubleJump = false; // Disable double jump after usage
            }
        }
    }

    void Jump(float force)
    {
        rb.velocity = new Vector2(rb.velocity.x, force);
        jumpCount++;
    }

    void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.CompareTag("Hazard"))
        {
            TakeDamage(10);
        }
        else if (collision.gameObject.CompareTag("IronMaiden"))
        {
            ChangeForm("Ghost");
        }
    }

    void TakeDamage(int damage)
    {
        if (isAlive)
        {
            currentHealth -= damage;
            if (currentHealth <= 0)
            {
                currentHealth = 0;
                GameOver();
            }
        }
    }

    void ChangeForm(string newState)
    {
        if (newState == "Ghost" && !isGhost)
        {
            isGhost = true;
            isAlive = true; // Keep alive state for game logic
            hiddenTileMap.SetActive(true); // Reveal hidden tiles
            GetComponent<Animator>().SetBool("isDead", true); // Update animation to show ghost state
        }
        else if (newState == "Alive" && isGhost)
        {
            isGhost = false;
            isAlive = true;
            hiddenTileMap.SetActive(false); // Hide special tiles
            GetComponent<Animator>().SetBool("isDead", false); // Update animation to show alive state
        }
    }

    void GameOver()
    {
        isAlive = false;
        // Handle game over logic, such as displaying a game over screen
        Debug.Log("Game Over");
        // Additional game over actions can be added here
    }
}
